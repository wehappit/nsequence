[1mdiff --git a/nsequence/nsequence.py b/nsequence/nsequence.py[m
[1mindex 90b98f6..7dd5184 100644[m
[1m--- a/nsequence/nsequence.py[m
[1m+++ b/nsequence/nsequence.py[m
[36m@@ -548,7 +548,7 @@[m [mclass NSequence(object):[m
 [m
         if func_arity != expected_arity:[m
             raise ArityMismatchError([m
[31m-                f"Function {getattr(func_to_validate, 'name', '')} expected {expected_arity} arguments but got {func_arity}"[m
[32m+[m[32m                f"Function {getattr(func_to_validate, '__name__', '')} expected {expected_arity} argument(s) but got {func_arity}"[m
             )[m
 [m
     @staticmethod[m
[1mdiff --git a/nsequence/t/test_nsequence.py b/nsequence/t/test_nsequence.py[m
[1mindex 507ac26..17db6ba 100644[m
[1m--- a/nsequence/t/test_nsequence.py[m
[1m+++ b/nsequence/t/test_nsequence.py[m
[36m@@ -5,8 +5,9 @@[m [mfrom nsequence import ([m
     UnexpectedIndexError,[m
     UnexpectedPositionError,[m
     InversionError,[m
[32m+[m[32m    ArityMismatchError,[m
 )[m
[31m-from .test_utils import i_x, a_x, l_x, q_x, c_x, h_x, s_x[m
[32m+[m[32mfrom .test_utils import i_x, a_x, l_x, q_x, c_x, h_x, s_x, b_x[m
 [m
 [m
 class TestNSequenceInstantiation(unittest.TestCase):[m
[36m@@ -54,6 +55,25 @@[m [mclass TestNSequenceInstantiation(unittest.TestCase):[m
             context.value.args[0],[m
         )[m
 [m
[32m+[m
[32m+[m[32m    def test_should_not_instantiate_nsequence_if_any_bad_object_provided_as_function([m
[32m+[m[32m        self,[m
[32m+[m[32m    ):[m
[32m+[m
[32m+[m[32m        with pytest.raises(ArityMismatchError) as context:[m
[32m+[m[32m            NSequence([m
[32m+[m[32m                #[m
[32m+[m[32m                func=b_x,[m
[32m+[m[32m                initial_index=1,[m
[32m+[m[32m                # Bad inverse[m
[32m+[m[32m                inverse_func="bad object as func",[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m        self.assertTrue([m
[32m+[m[32m            "Function b_x expected 1 argument(s), but got 3", context.value.args[0][m
[32m+[m[32m        )[m
[32m+[m
[32m+[m
     def test_should_not_instantiate_nsequence_if_any_bad_object_provided_as_function([m
         self,[m
     ):[m
[36m@@ -653,6 +673,8 @@[m [mclass TestNearestEntryComputation(unittest.TestCase):[m
 [m
         self.assertEqual(sequence.nearest_entry(25.54), (25, 390634))[m
 [m
[32m+[m[32m    # TODO: Tests for extra params[m
[32m+[m
 [m
 class TestNSequenceProperties(unittest.TestCase):[m
 [m
[1mdiff --git a/nsequence/t/test_utils.py b/nsequence/t/test_utils.py[m
[1mindex 39561d8..3707045 100644[m
[1m--- a/nsequence/t/test_utils.py[m
[1m+++ b/nsequence/t/test_utils.py[m
[36m@@ -10,7 +10,7 @@[m [mdef l_x(x):[m
 [m
 def q_x(x):[m
     """Quartic function"""[m
[31m-    return x**4 + 9[m
[32m+[m[32m    return x ** 4 + 9[m
 [m
 [m
 def a_x(x):[m
[36m@@ -20,7 +20,7 @@[m [mdef a_x(x):[m
 [m
 def c_x(x):[m
     """Cubic function"""[m
[31m-    return x**3 - x**2 - 1[m
[32m+[m[32m    return x ** 3 - x ** 2 - 1[m
 [m
 [m
 def h_x(x):[m
[36m@@ -33,4 +33,8 @@[m [mdef h_x(x):[m
 def s_x(x):[m
     """Sextique function"""[m
     # x(xâˆ’1)(xâˆ’2)(xâˆ’3)(xâˆ’4)(x-5)[m
[31m-    return x**6 - 10 * (x**5) + 35 * (x**4) - 50 * (x**3) + 24 * (x**2)[m
[32m+[m[32m    return x ** 6 - 10 * (x ** 5) + 35 * (x ** 4) - 50 * (x ** 3) + 24 * (x ** 2)[m
[32m+[m
[32m+[m
[32m+[m[32mdef b_x(x, y, z):[m
[32m+[m[32m    return x, y, z[m
